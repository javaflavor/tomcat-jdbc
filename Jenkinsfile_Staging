#!groovy

import groovy.json.JsonOutput

node('maven') {
	//def mvnCmd = "mvn -s ./settings.xml"
	def mvnCmd = "mvn"
	
	def appName = "sampleweb"
	def devPrj = "dev"
	def stgPrj = "stg"
	
	stage('Cleanup env Dev') {
		// Delete all objects except for is.
		openshift.withCluster() {
			openshift.withProject(devPrj) {
			    openshift.selector("bc", [ app: appName ]).delete()
			    openshift.selector("dc", [ app: appName ]).delete()
			    openshift.selector("svc", [ app: appName ]).delete()
			    openshift.selector("pod", [ app: appName ]).delete()
			    openshift.selector("route", [ app: appName ]).delete()
			}
		}
	}

	stage('Checkout Source') {
		checkout scm
	}

	def groupId    = getGroupIdFromPom("pom.xml")
	def artifactId = getArtifactIdFromPom("pom.xml")
	def version    = getVersionFromPom("pom.xml")

	stage('Build WAR') {
		echo "Building version ${version}"
		sh "${mvnCmd} clean package -DskipTests"
	}
	
	stage('Unit Tests') {
		echo "Unit Tests"
		sh "${mvnCmd} test"
	}

	def newTag = "dev-${version}"

	stage('Build Image') {
		echo "New Tag: ${newTag}"

		// Copy the war file and the configurations to deployments directory.
		sh "mkdir deployments"
		sh "cp -r configuration deployments"
		sh "cp ./target/tomcat-jdbc.war deployments/ROOT.war"

		// Start Binary Build in OpenShift using the file we just published
		openshift.withCluster() {
			openshift.withProject(devPrj) {
				if (!openshift.selector("is", appName).exists()) {
					// Create imageStream from file "openshift/sampleweb-is.yaml".
					openshift.create(readFile("openshift/sampleweb-is.yaml"))
				}
				// Create buildConfig from file "openshift/sampleweb-bc.yaml".
			    openshift.create(readFile("openshift/sampleweb-bc.yaml"))
			    // Start image build.
				openshift.selector("bc", appName).startBuild("--from-dir=./deployments").logs("-f")
				// Tag created image.
				def result = openshift.tag("$appName:latest", "$appName:$newTag")
				echo "${result.actions[0].cmd}"
				echo "${result.actions[0].out}"
			}
		}
	}

	stage('Deploy to Dev') {
		// Do deploy the target.
		openshift.withCluster() {
			openshift.withProject(devPrj) {
				// Deploy created image.
			    def created = openshift.newApp("--name=$appName", "$devPrj/$appName:$newTag")
				echo "${created.actions[0].cmd}"
				echo "${created.actions[0].out}"
				
				// Expose service.
				created.narrow("svc").expose()

				// Wait and print status deployment.
				def dc = created.narrow("dc")
				dc.rollout().status("-w")
			}
		}
	}
	
	stage('Integration Tests') {
		echo "Integration Tests"
		sh "${mvnCmd} -Pit verify -Dtarget.host=`oc get route $appName -n $devPrj --template='{{ .spec.host }}'` -Dtarget.port=80"
		
		// Add Staging ready tag to the IT-passed image.
		newTag = "stg-${version}"
		echo "New Tag: ${newTag}"
		
		openshift.withCluster() {
			openshift.withProject(devPrj) {
				// Tag IT-passed image.
				def result = openshift.tag("$appName:latest", "$appName:$newTag")
				echo "${result.actions[0].cmd}"
				echo "${result.actions[0].out}"
			}
		}		
	}

 	stage('Code Analysis') {
		echo "Code Analysis"
		sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000/ -Dsonar.projectName=${appName}"
	}
	
	stage('Prepare env Stg') {
		openshift.withCluster() {
			openshift.withProject(stgPrj) {
			    if (!openshift.selector("dc", "$appName-blue").exists()) {
			        def created = openshift.newApp("$devPrj/$appName:$newTag", "--name=$appName-blue", "--allow-missing-imagestream-tags", "--labels=app=$appName")
			        if (created.narrow("svc").count() == 0) {
			            echo "oc new-app not created svc."
			            created.narrow("dc").expose("--port=8080")
			        }
			        // Patch triggers to manual. Use openshift.apply(), because OCP3.6 does not work oc set triggers.
			        def patch = created.narrow("dc").object()
			        def imgchg = patch.spec.triggers.find{ it.type == 'ImageChange' }
			        imgchg.imageChangeParams.automatic = false
			        patch.spec.triggers = [ imgchg ]
			        openshift.apply(patch)
			        // Waiting initial deployment
			        created.narrow("dc").rollout().status("-w")
			    }
			    // Delete unnecessary is.
			    if (openshift.selector("is", "$appName-blue").exists()) {
			        openshift.selector("is", "$appName-blue").delete()
			    }
			    if (!openshift.selector("dc", "$appName-green").exists()) {
			        def created = openshift.newApp("$devPrj/$appName:$newTag", "--name=$appName-green", "--allow-missing-imagestream-tags", "--labels=app=$appName")
			        if (created.narrow("svc").count() == 0) {
			            echo "oc new-app not created svc."
			            created.narrow("dc").expose("--port=8080")
			        }
			        // Patch triggers to manual. Use openshift.apply(), because OCP3.6 does not work oc set triggers.
			        def patch = created.narrow("dc").object()
			        def imgchg = patch.spec.triggers.find{ it.type == 'ImageChange' }
			        imgchg.imageChangeParams.automatic = false
			        patch.spec.triggers = [ imgchg ]
			        openshift.apply(patch)
			        // Waiting initial deployment
			        created.narrow("dc").rollout().status("-w")
			    }
			    // Delete unnecessary is.
			    if (openshift.selector("is", "$appName-green").exists()) {
			        openshift.selector("is", "$appName-green").delete()
			    }
			    // Create route shared with blue and green.
			    if (!openshift.selector("route", "$appName").exists()) {
			        openshift.selector("svc", "$appName-blue").expose("--name=$appName")
			    }
			}
		}		
	}

    def dest = "$appName-green"
    def active = ""
    
	stage('Prepare Blue/Green') {
		openshift.withCluster() {
			openshift.withProject(stgPrj) {
			    def route = openshift.selector("route", "$appName").object()
			    active = route.spec.to.name
			    echo "Active svc: $active"
			    
			    if (active == "$appName-green") {
			        dest = "$appName-blue"
			    }
			    echo "Dest svc:   $dest"
			}
		}
	}
	
	stage('Deploy to Stg') {
		openshift.withCluster() {
			openshift.withProject(stgPrj) {
			    echo "Deploying to ${dest}"
			    def patch = openshift.selector("dc", "$dest").object()
			    def trigger = patch.spec.triggers.find{ it.type == 'ImageChange' }
			    trigger.imageChangeParams.from.name = "$appName:$newTag"
			    trigger.imageChangeParams.from.namespace = devPrj
			    echo "Patch spec: ${patch.spec.triggers}"
			    
			    openshift.apply(patch)
			    
			    def dc = openshift.selector("dc", "$dest")
			    dc.rollout().latest()
			    dc.rollout().status("-w")
			    
			    // Switch over to new route.
			    patch = openshift.selector("route", "$appName").object()
			    patch.spec.to.name = dest
			    echo "Patch spec.to.name: ${patch.spec.to.name}"

			    openshift.apply(patch)
			}
		}
	}
}

// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
	def matcher = readFile(pom) =~ '<version>(.+)</version>'
	matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
	def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
	matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
	def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
	matcher ? matcher[0][1] : null
}

